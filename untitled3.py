# -*- coding: utf-8 -*-
# """Untitled3.ipynb

# Automatically generated by Colab.

# Original file is located at
#     https://colab.research.google.com/drive/1VeV3jCdoJu_i8I4dRrQsU5mdqLO5leMg
# """

import requests
import os
import streamlit as st
import cv2
import numpy as np
from ultralytics import YOLO
import easyocr
from PIL import Image
import tempfile


output_path = "best.pt"
url = "https://raw.githubusercontent.com/aalasaliano/licenseplate/main/best.pt"

if not os.path.exists(output_path):
    print("Downloading model from GitHub...")
    response = requests.get(url)
    if response.status_code == 200:
        with open(output_path, "wb") as f:
            f.write(response.content)
        print("Download complete!")
    else:
        print(f"Download failed with status code: {response.status_code}")

# Load model YOLO
model = YOLO(output_path)

# Load OCR
reader = easyocr.Reader(['en'])

# Edit UI sedikit
st.markdown("""
    <h2 style='color: ##ffb3c2; font-family: Courier New;'>Pendeteksi Plat Nomor Kendaraan Indonesia</h2>
    <p style='font-size:18px; color:white;'>Kelompok 9: Aliyah Jasmine, Ashley Azzahra, Risya Safira</p>
""", unsafe_allow_html=True)

# # Judul aplikasi
# st.title("Pendeteksi Plat Nomor Kendaraan Indonesia")
# st.markdown("Kelompok 9: Aliyah Jasmine, Ashley Azzahra, Risya Safira")

# Upload gambar
uploaded_file = st.file_uploader("Upload gambarmu di sini!", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    # Buka dan tampilkan gambar
    image = Image.open(uploaded_file)
    st.image(image, caption="Gambar yang diupload", use_container_width=True)

    # Konversi ke format OpenCV
    image_np = np.array(image)
    img_bgr = cv2.cvtColor(image_np, cv2.COLOR_RGB2BGR)

    # Simpan ke file temporer
    with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as tmp:
        temp_path = tmp.name
        cv2.imwrite(temp_path, img_bgr)

    # Deteksi plat nomor dengan YOLO
    results = model(temp_path)

    for box in results[0].boxes.xyxy:
        x1, y1, x2, y2 = map(int, box)
        pad = 5
        x1, y1 = max(0, x1 - pad), max(0, y1 - pad)
        x2, y2 = min(img_bgr.shape[1], x2 + pad), min(img_bgr.shape[0], y2 + pad)
        plate_crop = img_bgr[y1:y2, x1:x2]

        # Preprocessing untuk OCR
        plate_crop = cv2.resize(plate_crop, (400, 120))
        gray = cv2.cvtColor(plate_crop, cv2.COLOR_BGR2GRAY)
        _, thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
        kernel = np.array([[0, -1, 0], [-1, 5, -1], [0, -1, 0]])
        sharp = cv2.filter2D(thresh, -1, kernel)

        # OCR dengan EasyOCR
        result = reader.readtext(sharp)

        if result:
            texts = []
            for _, text, conf in sorted(result, key=lambda x: x[0][0][0]):
                if conf > 0.3:
                    texts.append(text)
                    st.write(f"üìç Detected: '{text}' (Confidence: {conf:.2f})")

            final_text = " ".join(texts)
            st.subheader("üìÑ Hasil Akhir OCR:")
            st.success(final_text)
        else:
            st.warning("Tidak ada teks terdeteksi.")

        # Tampilkan crop hasil plat
        st.image(cv2.cvtColor(plate_crop, cv2.COLOR_BGR2RGB), caption="Cropped Plate", use_container_width=False)
